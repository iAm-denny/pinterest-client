[{"D:\\Programming\\projects\\pinterest-clone\\client\\src\\index.js":"1","D:\\Programming\\projects\\pinterest-clone\\client\\src\\App.js":"2","D:\\Programming\\projects\\pinterest-clone\\client\\src\\components\\Navbar.js":"3","D:\\Programming\\projects\\pinterest-clone\\client\\src\\components\\Home.js":"4","D:\\Programming\\projects\\pinterest-clone\\client\\src\\components\\Login.js":"5","D:\\Programming\\projects\\pinterest-clone\\client\\src\\components\\User.js":"6","D:\\Programming\\projects\\pinterest-clone\\client\\src\\components\\Detail.js":"7","D:\\Programming\\projects\\pinterest-clone\\client\\src\\gql\\queries.js":"8","D:\\Programming\\projects\\pinterest-clone\\client\\src\\components\\Post.js":"9","D:\\Programming\\projects\\pinterest-clone\\client\\src\\Helper\\Context.js":"10"},{"size":285,"mtime":1606473064045,"results":"11","hashOfConfig":"12"},{"size":1425,"mtime":1606540907511,"results":"13","hashOfConfig":"12"},{"size":2708,"mtime":1606642410979,"results":"14","hashOfConfig":"12"},{"size":1244,"mtime":1606542558923,"results":"15","hashOfConfig":"12"},{"size":2788,"mtime":1606540961367,"results":"16","hashOfConfig":"12"},{"size":1591,"mtime":1606473419452,"results":"17","hashOfConfig":"12"},{"size":3533,"mtime":1606547142336,"results":"18","hashOfConfig":"12"},{"size":1246,"mtime":1606471166270,"results":"19","hashOfConfig":"12"},{"size":1351,"mtime":1606541452614,"results":"20","hashOfConfig":"12"},{"size":134,"mtime":1606540844309,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"ns7wog",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"D:\\Programming\\projects\\pinterest-clone\\client\\src\\index.js",[],["48","49"],"D:\\Programming\\projects\\pinterest-clone\\client\\src\\App.js",[],"D:\\Programming\\projects\\pinterest-clone\\client\\src\\components\\Navbar.js",["50","51","52"],"D:\\Programming\\projects\\pinterest-clone\\client\\src\\components\\Home.js",["53"],"import { Link, withRouter } from \"react-router-dom\";\r\nimport { images } from \"../gql/queries\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { LoginContext } from '../Helper/Context'\r\nimport { useContext } from \"react\";\r\n\r\nfunction Home() {\r\n  const { data, error, loading } = useQuery(images);\r\n  const { loggedIn, setLoggedIn } = useContext(LoginContext)\r\n  console.log(data);\r\n  function displayImg() {\r\n    if (error) {\r\n      console.log(error);\r\n    }\r\n    if (loading) {\r\n      return <div className=\"loading\"></div>;\r\n    }\r\n    if (data) {\r\n      return data.images.map((img) => {\r\n        return <Image item={img} key={img.id} />;\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n  <>\r\n    <div className=\"img-container\">\r\n      {displayImg()}\r\n      {\r\n        loggedIn && <div className=\"createPost\"><Link to='/post'>+</Link></div>\r\n      }\r\n     \r\n    </div>\r\n    \r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(Home);\r\n\r\nfunction Image({ item }) {\r\n  console.log(item.userid);\r\n  return (\r\n    <Link to={{ pathname: `/pin/${item.id}/${item.userid}` }}>\r\n      <div className=\"img\">\r\n        <img src={item.image} alt=\"\" />\r\n        <div>\r\n          <i className=\"fas fa-heart\"></i>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n}\r\n","D:\\Programming\\projects\\pinterest-clone\\client\\src\\components\\Login.js",["54","55"],"import FacebookLogin from \"react-facebook-login\";\r\nimport GoogleLogin from \"react-google-login\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { UserLogin } from \"../gql/queries\";\r\nimport Cookies from \"universal-cookie\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { LoginContext,UserContext } from '../Helper/Context'\r\nimport { useContext } from \"react\";\r\n\r\nfunction Login(props) {\r\n  const { loggedIn, setLoggedIn } = useContext(LoginContext)\r\n  const { userProfile, setUserProfile } = useContext(UserContext)\r\n\r\n  const [loginMut] = useMutation(UserLogin);\r\n\r\n  const cookies = new Cookies();\r\n\r\n  const responseFacebook = (response) => {\r\n    const getCookie = cookies.get(\"userid\");\r\n    if (getCookie) {\r\n      cookies.remove(\"userid\");\r\n    }\r\n\r\n    loginMut({\r\n      variables: {\r\n        name: response.name,\r\n        email: response.email,\r\n        profileImage: response.picture.data.url,\r\n      },\r\n    })\r\n      .then((user) => {\r\n        cookies.set(\"userid\", user.data.user.id);\r\n        window.sessionStorage.setItem(\"userImg\", user.data.user.profileImage);\r\n        window.sessionStorage.setItem(\"loggedIn\", true);\r\n        props.history.push(\"/\");\r\n        setLoggedIn(true)\r\n        setUserProfile(window.sessionStorage.getItem(\"userImg\"))\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const responseGoogle = (response) => {\r\n    const getCookie = cookies.get(\"userid\");\r\n    if (getCookie) {\r\n      cookies.remove(\"userid\");\r\n    }\r\n\r\n    loginMut({\r\n      variables: {\r\n        name: response.profileObj.name,\r\n        email: response.profileObj.email,\r\n        profileImage: response.profileObj.imageUrl,\r\n      },\r\n    })\r\n      .then((user) => {\r\n        cookies.set(\"userid\", user.data.user.id);\r\n        sessionStorage.setItem(\"userImg\", user.data.user.profileImage);\r\n        sessionStorage.setItem(\"loggedIn\", \"true\");\r\n        setLoggedIn(true)\r\n        props.history.push(\"/\");\r\n        setUserProfile(window.sessionStorage.getItem(\"userImg\"))\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"loginForm\">\r\n        <h1>Login in with</h1>\r\n        <div className=\"fb_login\">\r\n          <FacebookLogin\r\n            appId=\"449720276049010\"\r\n            autoLoad={true}\r\n            fields=\"name,email,picture\"\r\n            callback={responseFacebook}\r\n            textButton=\"Facebook\"\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <GoogleLogin\r\n            clientId=\"918645088712-8gm5aodfiekhjcqud8fio1nom2sqvang.apps.googleusercontent.com\"\r\n            buttonText=\"Login\"\r\n            onSuccess={responseGoogle}\r\n            onFailure={responseGoogle}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(Login);\r\n","D:\\Programming\\projects\\pinterest-clone\\client\\src\\components\\User.js",["56","57"],"import React from \"react\";\r\nimport Cookies from \"universal-cookie\";\r\nimport { user, specificUserImage } from \"../gql/queries\";\r\nimport { useQuery } from \"@apollo/client\";\r\n\r\nfunction User() {\r\n  const cookies = new Cookies();\r\n  const { data } = useQuery(user, { variables: { id: cookies.get(\"userid\") } });\r\n  const { data: dataImg } = useQuery(specificUserImage, {\r\n    variables: { id: cookies.get(\"userid\") },\r\n  });\r\n  if (data) {\r\n    console.log(data);\r\n  }\r\n  if (dataImg) {\r\n    console.log(dataImg);\r\n  }\r\n  function displayUserProfile() {\r\n    if (data) {\r\n      return (\r\n        <div className=\"profile\">\r\n          <div>\r\n            <img src={data.user.profileImage} width=\"120px\" />\r\n          </div>\r\n          <div>\r\n            <h1>{data.user.name}</h1>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  function displayImg() {\r\n    if (dataImg) {\r\n      return (\r\n        <>\r\n          <h2>My pin</h2>\r\n          <div className=\"mypins\">\r\n            {dataImg.specificUserImage.map((img) => {\r\n              return (\r\n                <div>\r\n                  <img src={img.image} width=\"200px\" height=\"auto\" />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <div className=\"pins\">\r\n\r\n        {\r\n          cookies.get(\"userid\") ? (\r\n            <>\r\n            {displayUserProfile()}\r\n            {displayImg()}\r\n            </>\r\n          ): (\r\n            <div>Go login first</div>\r\n          )\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default User;\r\n","D:\\Programming\\projects\\pinterest-clone\\client\\src\\components\\Detail.js",["58"],"D:\\Programming\\projects\\pinterest-clone\\client\\src\\gql\\queries.js",[],"D:\\Programming\\projects\\pinterest-clone\\client\\src\\components\\Post.js",["59"],"import { useState, useEffect } from \"react\";\r\nimport Cookies from \"universal-cookie\";\r\nimport FileBase64 from \"react-file-base64\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { post, images } from \"../gql/queries\";\r\n\r\nfunction Post(props) {\r\n  const [image, setImage] = useState(\"\");\r\n  const [addImageMut] = useMutation(post);\r\n  const cookies = new Cookies();\r\n  const userid = cookies.get(\"userid\");\r\n\r\n  const submitHandle = (e) => {\r\n    e.preventDefault();\r\n    addImageMut({\r\n      variables: {\r\n        userid,\r\n        image,\r\n      },\r\n      \r\n        refetchQueries: [{\r\n          query: images\r\n        }]\r\n      \r\n    })\r\n    .then(() => {\r\n      props.history.push(\"/\")\r\n\r\n     })\r\n    .catch(err => console.log(err))\r\n  };\r\n  return (\r\n    <div >\r\n      {\r\n        userid ? (\r\n          <form onSubmit={submitHandle} className=\"post\">\r\n            <div>\r\n            <FileBase64\r\n            multiple={false}\r\n            onDone={({ base64 }) => setImage(base64)}\r\n          />\r\n          <div className=\"img\"><img src={image} alt=\"\"/></div>\r\n          \r\n            </div>\r\n\r\n          <div className=\"submit\">\r\n          <button>Submit</button>\r\n          </div>\r\n          \r\n        </form>\r\n        )\r\n        : (\r\n          <div>Go login Frist</div>\r\n        )\r\n\r\n      }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","D:\\Programming\\projects\\pinterest-clone\\client\\src\\Helper\\Context.js",[],["60","61"],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":1,"column":10,"nodeType":"68","messageId":"69","endLine":1,"endColumn":19},{"ruleId":"66","severity":1,"message":"70","line":1,"column":21,"nodeType":"68","messageId":"69","endLine":1,"endColumn":29},{"ruleId":"71","severity":1,"message":"72","line":49,"column":15,"nodeType":"73","endLine":54,"endColumn":17},{"ruleId":"66","severity":1,"message":"74","line":9,"column":21,"nodeType":"68","messageId":"69","endLine":9,"endColumn":32},{"ruleId":"66","severity":1,"message":"75","line":11,"column":11,"nodeType":"68","messageId":"69","endLine":11,"endColumn":19},{"ruleId":"66","severity":1,"message":"76","line":12,"column":11,"nodeType":"68","messageId":"69","endLine":12,"endColumn":22},{"ruleId":"71","severity":1,"message":"72","line":23,"column":13,"nodeType":"73","endLine":23,"endColumn":63},{"ruleId":"71","severity":1,"message":"72","line":41,"column":19,"nodeType":"73","endLine":41,"endColumn":70},{"ruleId":"77","severity":1,"message":"78","line":87,"column":23,"nodeType":"79","messageId":"80","endLine":87,"endColumn":38},{"ruleId":"66","severity":1,"message":"67","line":1,"column":20,"nodeType":"68","messageId":"69","endLine":1,"endColumn":29},{"ruleId":"62","replacedBy":"81"},{"ruleId":"64","replacedBy":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setLoggedIn' is assigned a value but never used.","'loggedIn' is assigned a value but never used.","'userProfile' is assigned a value but never used.","no-dupe-keys","Duplicate key 'backgroundColor'.","ObjectExpression","unexpected",["83"],["84"],"no-global-assign","no-unsafe-negation"]